#!/usr/bin/env node
var fs=require("fs")
var argv=process.argv
var walley=require("./walley.js")
console.log(argv)

var preload_js_str="function isalpha(e){return/^[a-z]+$/i.test(e)}function isdigit(e){return!isNaN(parseFloat(e))&&isFinite(e)}function len(e){if(typeof e==\"string\"){return e.length}else if(typeof e==\"object\"){return Object.keys(e).length}else{console.log(\"Error..\\nfunctin len() only support table or string\\n\")}}none=null;String.prototype.find=function(e,t){if(typeof t==\"undefined\"){t=0}return this.indexOf(e,t)};String.prototype.tolower=function(){return this.toLowerCase()};String.prototype.toupper=function(){return this.toUpperCase()};String.prototype.reverse=function(){return this.split(\"\").reverse().join(\"\")};String.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g,\"\")};Math[\"cot\"]=function(e){return 1/Math.tan(e)};Math[\"sec\"]=function(e){return 1/Math.cos(e)};Math[\"csc\"]=function(e){return 1/Math.sin(e)};Object.prototype.slice=function(e,t){var n={};var r=0;for(var i=e;i<t;i++){n[r]=this[i];r++}return n};Object.prototype.append=function(e){var t=-1;for(var n in this){if(isdigit(n)){n=parseInt(n);if(n>t){t=n}}}if(t!==-1){t=t+1}else{t=0}this[t]=e};Object.prototype.length=function(){return Object.keys(this).length}\n";


if (argv.length==2){
	console.log("Interactive mode");
	console.log("Press Ctrl + C to quit\n");
	var readline = require('readline');

	var input_str=""

	var rl = readline.createInterface({
	  input: process.stdin,
	  output: process.stdout
	})

	rl.setPrompt('walley> ')
	rl.prompt()

	eval(preload_js_str)

	var to_run=""

	rl.on('line', function(line) {
		to_run=to_run+" "+line
		var sl_string=walley.Code_Generation(to_run)
		//console.log(sl_string);

		// check incomplete
		//console.log(walley.INCOMPLETE_STATEMENT)

		if(walley.INCOMPLETE_STATEMENT==false){
			// print out output
			console.log(eval(sl_string))
			to_run=""
			rl.setPrompt('walley> ')
			rl.prompt()
		}
		else{
			rl.setPrompt("walley>>> ")
			rl.prompt()
		}
	})

	rl.on('close', function() {
	  console.log('Quit walley')
	  process.exit(0)
	});

}

// compile walley_file
if (argv[2]=="compile"){
	console.log("Begin to compile..")

	// get file that will be compiled 
	var file_name=argv[3]
	if (file_name==undefined){
		console.log("No input file..")
		process.exit(0)
	}
	if (file_name.slice(file_name.length-3,file_name.length)!=".wy"){
		console.log("File %s format wrong..\nNeed .wy\n")
		process.exit(0)
	}

	// get file that will be compiled to 
	var compile_to_file_name=argv[4]

	// if target file is undefined. then its name is compile file +".js"
	if(compile_to_file_name==undefined){
		compile_to_file_name=file_name.slice(0,file_name.length-3)
		compile_to_file_name=compile_to_file_name+".js"
	}

	// get content of file
	var content_in_file=fs.readFileSync(file_name,"utf8")

	// compile the content 
	var sl_string=walley.Code_Generation(content_in_file)

	sl_string=preload_js_str+sl_string
	// write to the target file
	fs.writeFile(compile_to_file_name,sl_string, function(err){
		if (err){
			console.log("Fail to write to file "+compile_to_file_name);
			process.exit(0);
		}
		console.log("Successfully compiled to file "+compile_to_file_name);
	});

}